Git - Loading to GitHub itself [primarily to keep code backups and version control]
Use Command Line or Specialized Application [viewed as not user friendly or with feature bloat] -> Terminal in MAC

git 
	used to start up bash to enter Git commands
	from there, go to chosen folder to hold Git repositories cd _____

git clone _____web link from git site for repository____
	create a directory wtihin folder based on the files in the repository on the Git site
	then move down to new directory with cd ______
	
git add ________.___
	make sure you have the file in the folder {add to Sandbox means having the physical file in the Sanbox folder}
git commit -m "___comment___"

git add -A
	add in all files in folder
	one comments for all files when commit after the add, to give each file a comment then need to commit after each file added

git push origin master
	update main Git repository on the site with updated commits

git reset HEAD ________.___
	stop tracking -> after adding multiple files, no longer want to commit one of them, use command before commit to not include it
	
git status 
	see all added, commited, current status compared to main
	
ls
	list of files in folder
	
cd ________
	go down to selected filename
	
cd ..
	go up to the next higher file 

cd ../..
	go up to highest file such as main drive
	
git add ________ OR git add ______\_____
	add in folder name in reposirotry-> anything that was updated in that folder
	OR add in subfolder within a folder on that repository
	
------------------------------------------------------------

COMMANDS FOUND UPON ACTIVATING GIT IN TERMINAL

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
	